# JWT Configuration
mp.jwt.verify.publickey.location=classpath:publicKey.pem
smallrye.jwt.sign.key.location=classpath:privateKey.pem
# Required issuer
mp.jwt.verify.issuer=https://java41.ru/issuer

# Resources to be included in the native executable
quarkus.native.resources.includes=privateKey.pem,publicKey.pem

# --- PostgreSQL Configuration ---

# Common database kind (required for Dev Services and Hibernate)
quarkus.datasource.db-kind=postgresql

# --- PRODUCTION Profile Configuration (when 'prod' profile is active) ---
# These settings will be used when you build a jar/native image and run it,
# or if you explicitly activate the 'prod' profile.
# Replace 'localhost:5432/quarkus' with your actual production connection string if different.
%prod.quarkus.datasource.username=quarkus
%prod.quarkus.datasource.password=quarkus
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/quarkus
# For production, 'drop-and-create' is usually not used. Consider 'validate', 'update', or 'none'.
%prod.quarkus.hibernate-orm.database.generation=drop-and-create
%prod.quarkus.log.category."io.quarkus".level=DEBUG

# --- DEVELOPMENT Profile Configuration ('dev' profile) -------------------------------------------
# -------------------------------------------------------------------------------------------------
# For the 'dev' profile, JDBC URL, username, and password are NOT explicitly set.
# This allows Quarkus Dev Services to automatically start PostgreSQL in Docker
# if Docker is available and no other active configurations for this profile exist.
# 'drop-and-create' is often a good choice for development to start with a clean database.
%dev.quarkus.hibernate-orm.database.generation=drop-and-create

# JWT Debug Logging - Enabled only for 'dev' profile
%dev.quarkus.log.category."io.quarkus.smallrye.openapi".level=DEBUG
%dev.quarkus.log.category."org.jose4j".level=DEBUG


# --- TEST Profile Configuration ('test' profile) -------------------------------------------------
# -------------------------------------------------------------------------------------------------

# For the 'test' profile, similar to 'dev', JDBC URL, username, and password are NOT explicitly set,
# allowing Dev Services to manage the database.
# 'drop-and-create' ensures tests run against a clean database schema.
%test.quarkus.hibernate-orm.database.generation=drop-and-create

# Optional: If you want Dev Services to use a specific PostgreSQL image for dev/test (uncomment to use):
# %dev.quarkus.datasource.devservices.image-name=postgres:14-alpine
# %test.quarkus.datasource.devservices.image-name=postgres:14-alpine


# --- OpenAPI settings -----------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------

mp.openapi.info.title=Chat Application API
mp.openapi.info.version=1.0.0
mp.openapi.info.description=API for a Telegram-like chat application
mp.openapi.info.contact.name=Support Team
mp.openapi.info.contact.email=support@example.com
mp.openapi.info.license.name=Apache 2.0
mp.openapi.info.license.url=https://www.apache.org/licenses/LICENSE-2.0.html

%dev.quarkus.swagger-ui.enable=true
quarkus.smallrye-openapi.path=/openapi

quarkus.smallrye-openapi.servers[0].url=https://java41.ru
quarkus.smallrye-openapi.servers[0].description=Production Server
quarkus.smallrye-openapi.servers[1].url=http://localhost:8080
quarkus.smallrye-openapi.servers[1].description=Local Development Server

quarkus.smallrye-openapi.security-scheme-name=BearerAuth
quarkus.smallrye-openapi.security-scheme=JWT
quarkus.smallrye-openapi.security-scheme-description=JWT Authentication. Use a JWT obtained from /auth/login. Expected claims: sub (email), roles, id, username.
quarkus.arc.dev-mode.monitoring-enabled=true
quarkus.console.color=true
quarkus.bootstrap.disable-jar-cache=true
quarkus.arc.test.disable-application-lifecycle-observers=true
quarkus.swagger-ui.theme=material
